#summary BNF grammar for QBQL

----

= QBQL Grammar =

{{{
almostDisj:  expr "/" "1" "\" expr
assertion:   boolean "."
          |  implication "."
assignment:  identifier "=" expr ";"
          |  identifier "=" partition ";"
attribute:   identifier
big:         expr "\" "/" expr
boolean:     parBool
          |  "-" parBool
          |  boolean "&" boolean
          |  boolean "|" boolean
          |  expr "<" expr
          |  expr "=" expr
          |  expr ">" expr
          |  expr "~" expr
          |  partition "<" partition
          |  partition "=" partition
          |  partition ">" partition
          |  expr "!" "=" expr
complement:  identifier "'"
          |  parExpr "'"
contain:     expr "/" "|" expr
content:     value
          |  content value
database:    assignment
          |  database assignment
disjoint:    expr "/" "\" expr
expr:        almostDisj
          |  big
          |  complement
          |  contain
          |  disjoint
          |  identifier
          |  innerJoin
          |  innerUnion
          |  inverse
          |  join
          |  outerUnion
          |  parExpr
          |  relation
          |  setEQ
          |  setIX
          |  table
          |  transpCont
          |  unison
header:      identifier
          |  header identifier
implication:  boolean "-" ">" boolean
          |  boolean "<" "-" boolean
          |  boolean "<" "-" ">" boolean
innerJoin:   expr "*" expr
innerUnion:  expr "v" expr
inverse:     identifier "`"
          |  parExpr "`"
join:        expr "^" expr
namedValue:  attribute "=" value
outerUnion:  expr "+" expr
parBool:     "(" boolean ")"
parExpr:     "(" expr ")"
partition:   content
          |  "(" partition ")"
          |  expr "#" expr
          |  partition "^" partition
          |  partition "v" partition
          |  partition "|" content
program:     assertion
          |  assignment
          |  query
          |  program program
query:       expr ";"
          |  partition ";"
relation:    "{" tuples "}"
setEQ:       expr "/" "|" "\" expr
setIX:       expr "\" "|" "/" expr
table:       "[" header "]"
          |  "[" header "]" content
transpCont:  expr "|" "\" expr
tuple:       "<" values ">"
tuples:      tuple
          |  tuples "," tuple
unison:      expr "@" expr
value:       digits
          |  identifier
values:      namedValue
          |  values "," namedValue

}}}