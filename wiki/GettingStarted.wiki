#summary On this page we describe how to create a small database and check assertions against it.

----
== Programming Environment ==

QBQL is written in java. Therefore, until QBQL elevates to more sophisticated interface, the only way to get it running is to install _Eclipse_, _Subversion_ plugin, and then check out the source from _google_ _code_ svn. All these steps are standard and are documented elsewhere.

== Database ==

To create a _database_ you need to describe it in a text file. The syntax for QbqlGrammar consists of two parts. You either specify the relation in set-theoretic notation explicitly

{{{relation_var = {<attribute1=value1, attribute2=value2,...>,<attribute1=value3, attribute2=value4, ...>, ...};}}}

or build a relation from the existing ones by applying [http://arxiv.org/abs/0807.3795 relational lattice] operations. For example, the fragment

{{{Blocks = {
  <name=a,shape=tet,size=small>,
  <name=b,shape=cube,size=small>,
  <name=c,shape=cube,size=medium>,
  <name=d,shape=cube,size=large>,
  <name=e,shape=dodec,size=large>,
  <name=f,shape=tet,size=large>
};}}}

`Large = {<size=large>};`


defines two relations named `Blocks` and `Large` from Wittgenstein.db for a database of geometric shapes borrowed from "Language, Proof, and Logic" textbook.

There is no special syntax for empty relation. Create non empty relation with a dummy tuple and join it with R00.

Watch for *pitfalls*. Predefined relation constants `R00`, `R01` are not database dependent and, therefore are calculated before database creation. `R10` and `R11`, however  are not defined until the very last relation is added to the database. In other words, you can use can be use `R00`, `R01` in relational expression within database definition file, but not `R10` and `R11`. Likewise, outer union and complement leverage the `R11` definition and, therefore, can't be used in the database definition file.  

The name of the database definition text file is hard coded in the beginning of `Database.java` file. Try Wittgenstein.db for a database of geometric shapes borrowed from "Language, Proof, and Logic" textbook.

== Assertions ==
 
You define _assertions_ as equations 

`expr = expr.`

`expr = expr.`

`...`

in a text file as well. Each expression is either a relational variable, or terms built with operations of join `^`, inner union `v`, outer union `+`, inner join `*`, and negation `'` applied to relations. See QbqlGrammar for the details.

For example, the Wittgenstein.assertions file 

`(Blocks ^ D) v Size = Large.`

`(Blocks ^ A) v Size = Small.`

`(((A ^ Left) v Comparison) ^ (D ^ Right)) v R00 = R01.` 

   
claims the following propositions

`D is a Large Block`

`A is a Small Block`

`A is smaller than D`


The name of the assertions text file is hard coded in the beginning of `Database.java`.

== Run the program ==

Now you are set. Just run the Database.main() and watch the console output. If the database satisfies all the assertions then the expected output is

`All Assertions are OK`

otherwise it would print out the offending assertion and the values of the variables.