#summary On this page we describe how to create a small database and check assertions against it.

----
== The programming environment ==

QBQL is written in java. Therefore, until QBQL elevates to more sophisticated interface, the only way to get it running is to install _Eclipse_, _Subversion_ plugin, and then check out the source from _google_ _code_ svn. All these steps are standard and are documented elsewhere.

== The database ==

To create a _database_ you need to describe it in a text file. The syntax for QbqlGrammar is:

{{{relation_var = {<attribute1=value1, attribute2=value2,...>,<attribute1=value3, attribute2=value4, ...>, ...};}}}

For example, the fragment

`A = {<x=1>};`		

`B = {<x=1>,<x=2>};`

defines two relations named `A` and `B` from figure 1 of the [http://arxiv.org/abs/0807.3795 foundation paper]. Here is familiar oracle `DEPT` table:

{{{DEPT = {<deptno=10,dname=ACCOUNTING>,<deptno=20,dname=RESEARCH>};}}}

There is no special syntax for empty relation. Create non empty relation with a dummy tuple and join it with R00.

The name of the database definition text file is hard coded in the `Database.java` in the first line of the constructor `Database()`. Try Wittgenstein.db for a database of geometric shapes borrowed from "Language, Proof, and Logic" textbook.

== The axioms ==
 
You define _assertions_ as equations 

`expr = expr.`

`expr = expr.`

`...`

in a text file as well. The syntax is that of _Prover9_: expressions are relational variables, or terms built with operations of join `^`, inner union `v`, outer union `+`, inner join `*`, and negation `'` applied to relations. The `R00`, `R01`, `R10` and `R11` are predefined relation constants. 

For example, the Wittgenstein.assertions file 

`(Blocks ^ D) v Size = Large.`

`(Blocks ^ A) v Size = Small.`

`(((A ^ Left) v Comparison) ^ (D ^ Right)) v R00 = R01.` 
   
claims the following propositions

"D is a Large Block"
"A is a Small Block"
"A is smaller than D"

The name of the assertions text file is hard coded in the beginning of `Database.java`.

== Run the program ==

Now you are set. Just run the Database.main() and watch the console output. If the database satisfies all the assertions then the expected output is

`All Assertions are OK`

otherwise it would print out the offending assertion and the values of the variables.