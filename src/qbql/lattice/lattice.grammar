almostDisj:  expr '/' '1' expr
;
assertion:   boolean '.'
;
assignment:  identifier '=' expr ';'
          |  identifier '=' partition ';'
;
attribute:   identifier
;
big:         expr '/' '!' expr
;
boolean:     
             implication
;

implication: 
             implication '-' '>' implication
          |  implication '<' '-' implication
          |  implication '<' '-' '>' implication
          |  disjunction
          |  '(' implication ')'
;

disjunction: 
             conjunction '|' disjunction
          |  conjunction 
          |  '(' disjunction ')'
;

conjunction: 
             proposition '&' conjunction
          |  proposition 
          |  '(' conjunction ')'
          |   '-' '(' conjunction ')'
;

proposition:     
             expr '<' expr
          |  expr '=' expr
          |  expr '>' expr
          |  expr '~' expr
          |  partition '<' partition
          |  partition '=' partition
          |  partition '>' partition
          |  expr '!' '=' expr
          |  expr '<' '~' expr
          |  expr '>' '~' expr
;


complement:  identifier 'qtSymbol'
          |  parExpr 'qtSymbol'
;
contains:     expr '/' '<' expr
;
content:     value
          |  content value
;
database:    assignment
          |  database assignment
;
disjoint:    expr '/' '0' expr
;
expr:        almostDisj
          |  big
          |  complement
          |  contains
          |  disjoint
          |  identifier
          |  innerJoin
          |  innerUnion
          |  inverse
          |  join
          |  outerUnion
          |  parExpr
          |  relation
          |  setEQ
          |  setIX
          |  table
          |  transpCont
          |  unnamedJoin
          |  unnamedMeet
;
header:      identifier
          |  string_literal
          |  header identifier
          |  header ',' identifier
;
innerJoin:   expr '*' expr
;
innerUnion:  expr 'v' expr
;
inverse:     identifier '`'
          |  parExpr '`'
;
join:        expr '^' expr
;
namedValue:  attribute '=' value
;
outerUnion:  expr '+' expr
;
parExpr:     '(' expr ')'
;
partition:  --dummy '#' problem in expr generator
             content
          |  '(' partition ')'
          |  expr '#' expr
          |  partition '^' partition
          |  partition 'v' partition
          |  partition '|' content 
           
;
program:     assertion
          |  assignment
          |  query
          |  program program
;
query:       expr ';'
          |  partition ';'
;
relation:    '{' tuples '}'
;
setEQ:       expr '/' '=' expr
;
setIX:       expr '/' '^' expr
;
table:       '[' ']'
          |  '[' header ']'
          |  '[' header ']' content
          |  '[' identifier '=' identifier ']'
;
transpCont:  expr '/' '>' expr
;
tuple:       '<' values '>'
;
tuples:      tuple
          |  tuples ',' tuple
;
unnamedJoin:  expr '^' '~' expr
;
unnamedMeet:  expr 'v' '~' expr
;
value:       digits
          |  '-' digits
          |  identifier
          |  string_literal
;
values:      namedValue
          |  values ',' namedValue
;